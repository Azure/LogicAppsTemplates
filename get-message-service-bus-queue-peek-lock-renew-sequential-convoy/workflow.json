{
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
        "Main_Scope": {
            "type": "Scope",
            "actions": {
                "Business_Logic_Scope_First_Message": {
                    "type": "Scope",
                    "description": "Process the message received from the queue by the trigger.",
                    "actions": {
                        "Business_Logic_Actions_First_Message": {
                            "type": "Compose",
                            "inputs": "Add your business logic here. If your logic is the same for all messages, you can invoke a new workflow here and concentrate all business logic in one place."
                        }
                    }
                },
                "Until_Process_Complete": {
                    "type": "Until",
                    "description": "This branch keeps the session lock alive, so the logic app can continue processing new messages from the queue.",
                    "expression": "@equals(variables('processComplete'),true)",
                    "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                    },
                    "actions": {
                        "Renew_a_queue_session": {
                            "type": "ServiceProvider",
                            "inputs": {
                                "parameters": {
                                    "queueName": "@parameters('queueNameSession_#workflowname#')",
                                    "sessionId": "@triggerBody()?['sessionId']"
                                },
                                "serviceProviderConfiguration": {
                                    "connectionName": "serviceBus_#workflowname#",
                                    "operationId": "renewQueueSession",
                                    "serviceProviderId": "/serviceProviders/serviceBus"
                                }
                            }
                        },
                        "Delay": {
                            "type": "Wait",
                            "inputs": {
                                "interval": {
                                    "count": "@parameters('delayInMinutes_#workflowname#')",
                                    "unit": "Minute"
                                }
                            },
                            "runAfter": {
                                "Renew_a_queue_session": [
                                    "SUCCEEDED"
                                ]
                            }
                        }
                    },
                    "runAfter": {
                        "Complete_the_initial_message_in_a_session": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Until_No_More_Messages_in_the_queue": {
                    "type": "Until",
                    "description": "Keeps picking messages from the queue until no more messages are available.",
                    "expression": "@equals(variables('messageCount'),0)",
                    "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                    },
                    "actions": {
                        "Get_messages_from_a_queue_session": {
                            "type": "ServiceProvider",
                            "description": "Picks up the next messages in the queue. The number of messages picked up is controlled by the messageBatchSize parameter). If messages need to be processed in the order they arrived in the queue, us messageBatchSize = 1.",
                            "inputs": {
                                "parameters": {
                                    "queueName": "@parameters('queueNameSession_#workflowname#')",
                                    "sessionId": "@triggerBody()?['sessionId']",
                                    "maxMessages": "@parameters('messageBatchSize_#workflowname#')"
                                },
                                "serviceProviderConfiguration": {
                                    "connectionName": "serviceBus_#workflowname#",
                                    "operationId": "getMessagesFromQueueSession",
                                    "serviceProviderId": "/serviceProviders/serviceBus"
                                }
                            }
                        },
                        "For_each": {
                            "type": "Foreach",
                            "description": "Process each message in the queue, that was picked up.",
                            "foreach": "@body('Get_messages_from_a_queue_session')",
                            "actions": {
                                "Business_Logic_Scope_Next_Messages": {
                                    "type": "Scope",
                                    "actions": {
                                        "Business_Logic_Actions_Next_Messages": {
                                            "type": "Compose",
                                            "inputs": "Add your business logic here. If your logic is the same for all messages, you can invoke a new workflow here and concentrate all business logic in one place."
                                        }
                                    }
                                },
                                "Complete_the_next_message_in_a_session": {
                                    "type": "ServiceProvider",
                                    "inputs": {
                                        "parameters": {
                                            "messageId": "@item()?['messageId']"
                                        },
                                        "serviceProviderConfiguration": {
                                            "connectionName": "serviceBus_#workflowname#",
                                            "operationId": "completeMessageInSession",
                                            "serviceProviderId": "/serviceProviders/serviceBus"
                                        }
                                    },
                                    "runAfter": {
                                        "Business_Logic_Scope_Next_Messages": [
                                            "SUCCEEDED"
                                        ]
                                    }
                                },
                                "Abandon_the_next_message_in_a_session": {
                                    "type": "ServiceProvider",
                                    "inputs": {
                                        "parameters": {
                                            "messageId": "@triggerBody()?['messageId']"
                                        },
                                        "serviceProviderConfiguration": {
                                            "connectionName": "serviceBus_#workflowname#",
                                            "operationId": "abandonMessageInSession",
                                            "serviceProviderId": "/serviceProviders/serviceBus"
                                        }
                                    },
                                    "runAfter": {
                                        "Business_Logic_Scope_Next_Messages": [
                                            "TIMEDOUT",
                                            "SKIPPED",
                                            "FAILED"
                                        ]
                                    }
                                }
                            },
                            "runAfter": {
                                "Set_Queue_Message_Count": [
                                    "SUCCEEDED"
                                ]
                            }
                        },
                        "Set_Queue_Message_Count": {
                            "type": "SetVariable",
                            "description": "Updates the message counter with the current number of messages being processed.",
                            "inputs": {
                                "name": "messageCount",
                                "value": "@length(body('Get_messages_from_a_queue_session'))"
                            },
                            "runAfter": {
                                "Get_messages_from_a_queue_session": [
                                    "SUCCEEDED"
                                ]
                            }
                        }
                    },
                    "runAfter": {
                        "Complete_the_initial_message_in_a_session": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Set_Process_Complete_to_True": {
                    "type": "SetVariable",
                    "description": "Sets process to complete so the session lock can be closed.",
                    "inputs": {
                        "name": "processComplete",
                        "value": true
                    },
                    "runAfter": {
                        "Until_No_More_Messages_in_the_queue": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Complete_the_initial_message_in_a_session": {
                    "type": "ServiceProvider",
                    "inputs": {
                        "parameters": {
                            "messageId": "@triggerBody()?['messageId']"
                        },
                        "serviceProviderConfiguration": {
                            "connectionName": "serviceBus_#workflowname#",
                            "operationId": "completeMessageInSession",
                            "serviceProviderId": "/serviceProviders/serviceBus"
                        }
                    },
                    "runAfter": {
                        "Business_Logic_Scope_First_Message": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Abandon_the_initial_message_in_a_session": {
                    "type": "ServiceProvider",
                    "inputs": {
                        "parameters": {
                            "messageId": "@triggerBody()?['messageId']"
                        },
                        "serviceProviderConfiguration": {
                            "connectionName": "serviceBus_#workflowname#",
                            "operationId": "abandonMessageInSession",
                            "serviceProviderId": "/serviceProviders/serviceBus"
                        }
                    },
                    "runAfter": {
                        "Business_Logic_Scope_First_Message": [
                            "TIMEDOUT",
                            "SKIPPED",
                            "FAILED"
                        ]
                    }
                }
            },
            "runAfter": {
                "Initialize_Message_Queue_Size": [
                    "SUCCEEDED"
                ]
            }
        },
        "Close_a_queue_session_and_succeed_workflow": {
            "type": "ServiceProvider",
            "description": "Closes the session and completes the workflow successfully.",
            "inputs": {
                "parameters": {
                    "queueName": "@parameters('queueNameSession_#workflowname#')",
                    "sessionId": "@triggerBody()?['sessionId']"
                },
                "serviceProviderConfiguration": {
                    "connectionName": "serviceBus_#workflowname#",
                    "operationId": "closeQueueSession",
                    "serviceProviderId": "/serviceProviders/serviceBus"
                }
            },
            "runAfter": {
                "Main_Scope": [
                    "SUCCEEDED"
                ]
            }
        },
        "Compensation_Scope": {
            "type": "Scope",
            "description": "Executes the compensation logic - the template closes the queue session, retrieves errors from the main scope and terminates the workflow in an error state, with the errors showing in the error message.",
            "actions": {
                "Filter_Main_Scope_Errors": {
                    "type": "Query",
                    "inputs": {
                        "from": "@result('Main_Scope')",
                        "where": "@equals(item()?['status'],'Failed')"
                    },
                    "runAfter": {
                        "Close_a_queue_session_and_fail_workflow": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Format_Errors": {
                    "type": "Select",
                    "inputs": {
                        "from": "@body('Filter_Main_Scope_Errors')",
                        "select": {
                            "action": "@item()?['name']",
                            "errorResult": "@item()"
                        }
                    },
                    "runAfter": {
                        "Filter_Main_Scope_Errors": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Terminate": {
                    "type": "Terminate",
                    "inputs": {
                        "runStatus": "Failed",
                        "runError": {
                            "code": "500",
                            "message": "There was an error processing messages from Session ID @{triggerBody()?['sessionId']}. \n\nThe following error(s) occured:\n\n@{body('Format_Errors')}"
                        }
                    },
                    "runAfter": {
                        "Format_Errors": [
                            "SUCCEEDED"
                        ]
                    }
                },
                "Close_a_queue_session_and_fail_workflow": {
                    "type": "ServiceProvider",
                    "inputs": {
                        "parameters": {
                            "queueName": "@parameters('queueNameSession_#workflowname#')",
                            "sessionId": "@triggerBody()?['sessionId']"
                        },
                        "serviceProviderConfiguration": {
                            "connectionName": "serviceBus_#workflowname#",
                            "operationId": "closeQueueSession",
                            "serviceProviderId": "/serviceProviders/serviceBus"
                        }
                    }
                }
            },
            "runAfter": {
                "Main_Scope": [
                    "TIMEDOUT",
                    "SKIPPED",
                    "FAILED"
                ]
            }
        },
        "Initialize_Process_Complete_variable": {
            "type": "InitializeVariable",
            "description": "Creates a variable to indicate that there is no more messages to process, so the convoy can be completed.",
            "inputs": {
                "variables": [
                    {
                        "name": "processComplete",
                        "type": "boolean",
                        "value": false
                    }
                ]
            },
            "runAfter": {}
        },
        "Initialize_Message_Queue_Size": {
            "type": "InitializeVariable",
            "description": "Creates a variable to indicate if there are messages to be processed for that queue and session.",
            "inputs": {
                "variables": [
                    {
                        "name": "messageCount",
                        "type": "integer",
                        "value": 0
                    }
                ]
            },
            "runAfter": {
                "Initialize_Process_Complete_variable": [
                    "SUCCEEDED"
                ]
            }
        }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
        "On_single_new_message_from_queue_session": {
            "type": "ServiceProvider",
            "kind": "Polling",
            "inputs": {
                "parameters": {
                    "queueName": "@parameters('queueNameSession_#workflowname#')"
                },
                "serviceProviderConfiguration": {
                    "connectionName": "serviceBus_#workflowname#",
                    "operationId": "onSingleNewMessageFromQueueSession",
                    "serviceProviderId": "/serviceProviders/serviceBus"
                }
            },
            "recurrence": {
                "interval": 30,
                "frequency": "Second"
            }
        }
    }
}