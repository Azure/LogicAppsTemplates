"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
"actions": {
    "Scope-Catch": {
        "actions": {
            "Post_message_in_a_chat_or_channel_-_Error": {
                "description": "This is a general exception handler. If you have an error above, you will learn more information about the failure.",
                "inputs": {
                    "body": {
                        "messageBody": "<p>An error has occurred within the ProcessBPTAlerts workflow. Here are the details:</p><br><p>@{result('Scope-Try')}</p>",
                        "recipient": "@parameters('Teams-Recipient')"
                    },
                    "host": {
                        "connection": {
                            "referenceName": "teams"
                        }
                    },
                    "method": "post",
                    "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Chat with Flow bot')}"
                },
                "type": "ApiConnection"
            }
        },
        "runAfter": {
            "Scope-Try": [
                "TIMEDOUT",
                "SKIPPED",
                "FAILED"
            ]
        },
        "type": "Scope"
    },
    "Scope-Try": {
        "actions": {
            "Capture_Current_Timestamp": {
                "description": "To avoid race conditions/long running processes, we will capture the timestamp which will subsequently used to update table storage at end of workflow. Any new records added to ADX will be processed in next batch.",
                "inputs": "@utcNow()",
                "runAfter": {
                    "Parse-KQLQueryResult": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "Compose-KQLQuery": {
                "description": "Composing ADX query using KQL. We will query the table for our Business Process and look for any records with a failure status that are newer than our timestamp stored in Azure Table Storage.",
                "inputs": "@{parameters('Kusto-TableName')}\n| order by eventTimestamp desc \n| where eventStatus == \"failure\" and eventTimestamp > todatetime(\"@{outputs('Compose-LastTimeStamp')}\")",
                "runAfter": {
                    "Compose-LastTimeStamp": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "Compose-LastTimeStamp": {
                "description": "Table storage will return an array, using compose here to simplify usage further down workflow.",
                "inputs": "@first(body('Query_Entities_Get_latest_alert')?['entities'])['LastAlertedProcessed']",
                "runAfter": {
                    "Query_Entities_Get_latest_alert": [
                        "SUCCEEDED"
                    ]
                },
                "type": "Compose"
            },
            "Condition": {
                "actions": {
                    "For_each": {
                        "actions": {
                            "Compose-BusinessProcessDetailsQuery": {
                                "description": "Construct our query that will be based upon our correlationId or our \"Transaction Id\"",
                                "inputs": "@{parameters('Kusto-TableName')}\n| order by eventTimestamp asc\n| where correlationId == \"@{item()['correlationId']}\"\n",
                                "type": "Compose"
                            },
                            "Create_HTML_table_BP_Details": {
                                "description": "Take the Data mapper output and then convert it into an HTML table so that we can include it in our communication.",
                                "inputs": {
                                    "format": "HTML",
                                    "from": "@body('Transform_using_Data_Mapper_XSLT')"
                                },
                                "runAfter": {
                                    "Transform_using_Data_Mapper_XSLT": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Table"
                            },
                            "Post_message_in_a_chat_or_channel": {
                                "description": "Post a message to a user that includes the business process stage that failed and the rest of the business process execution details.",
                                "inputs": {
                                    "body": {
                                        "isAlert": true,
                                        "messageBody": "<p><u><b><strong style=\"color: rgb(74, 144, 226);\">A Business Process Stage has failed with the following details:</strong></b></u></p><br><p><b><strong style=\"color: rgb(74, 144, 226);\">Business Process Name:</strong></b> @{item()['metadata']['businessProcessName']}</p><p><b><strong>Ticket Number:</strong></b> @{item()['correlationId']}</p><p><b><strong>Stage Name: </strong></b>@{item()['eventName']}</p><p><b><strong>Time Stamp:</strong></b> @{replace(substring(item()['eventTimestamp'],0,19),'T',' ')}</p><p><b><strong>Stage Status:</strong></b> @{item()['eventStatus']}</p><p><b><strong>Logic App:</strong></b> @{item()['metadata']['appName']}</p><p><b><strong>Workflow Name:</strong></b> @{item()['metadata']['flowName']}</p><p><b><strong>Run Instance Id:</strong></b> @{item()['metadata']['flowRunSequenceId']}</p><p><b><strong>Properties emitted: </strong></b>@{replace(replace(replace(replace(string(item()['properties']),'{\"',': '),'\":\"',': '),'\"}',''),'\",\"',' ')}</p><br><p><b><strong style=\"background-color: rgb(255, 255, 255); color: rgb(74, 144, 226);\">Entire Business Process:</strong></b></p><p>@{body('Create_HTML_table_BP_Details')}</p><br><br>",
                                        "recipient": "@parameters('Teams-Recipient')"
                                    },
                                    "host": {
                                        "connection": {
                                            "referenceName": "teams"
                                        }
                                    },
                                    "method": "post",
                                    "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Chat with Flow bot')}"
                                },
                                "runAfter": {
                                    "Create_HTML_table_BP_Details": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ApiConnection"
                            },
                            "Run_KQL_query_BP_Details": {
                                "description": "Execute query looking for all business process records for a particular transaction.",
                                "inputs": {
                                    "body": {
                                        "cluster": "@parameters('Kusto-URL')",
                                        "csl": "@{outputs('Compose-BusinessProcessDetailsQuery')}",
                                        "db": "@parameters('Kusto-DBName')"
                                    },
                                    "host": {
                                        "connection": {
                                            "referenceName": "kusto-1"
                                        }
                                    },
                                    "method": "post",
                                    "path": "/ListKustoResults/false"
                                },
                                "runAfter": {
                                    "Compose-BusinessProcessDetailsQuery": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ApiConnection"
                            },
                            "Transform_using_Data_Mapper_XSLT": {
                                "description": "We will take our ADX - KQL result and transform it into a smaller message and also perform some data manipulation.",
                                "inputs": {
                                    "content": "@body('Run_KQL_query_BP_Details')",
                                    "map": {
                                        "name": "BPKQL-to-Teams.xslt",
                                        "source": "LogicApp"
                                    }
                                },
                                "kind": "DataMapper",
                                "runAfter": {
                                    "Run_KQL_query_BP_Details": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "Xslt"
                            },
                            "Update_Entity_-_Last_Processed": {
                                "description": "Now that we have processed the batch we need to update the Azure Storage table so that we exclude these records from future executions",
                                "inputs": {
                                    "parameters": {
                                        "entity": {
                                            "LastAlertedProcessed": "@outputs('Capture_Current_Timestamp')",
                                            "PartitionKey": "CustomerService",
                                            "RowKey": "PowerOutageTickets"
                                        },
                                        "tableName": "@parameters('Azure-TableName')"
                                    },
                                    "serviceProviderConfiguration": {
                                        "connectionName": "azureTables-2",
                                        "operationId": "updateEntity",
                                        "serviceProviderId": "/serviceProviders/azureTables"
                                    }
                                },
                                "runAfter": {
                                    "Post_message_in_a_chat_or_channel": [
                                        "SUCCEEDED"
                                    ]
                                },
                                "type": "ServiceProvider"
                            }
                        },
                        "description": "A business process is likely to have many stages so now we want to get the status of remaining stages in business process.",
                        "foreach": "@body('Parse-KQLQueryResult')?['value']",
                        "type": "Foreach"
                    }
                },
                "description": "Checking to see if we have any records returned. If we do, it means we have failures which we need to process.",
                "else": {
                    "actions": {}
                },
                "expression": {
                    "and": [
                        {
                            "greater": [
                                "@length(body('Parse-KQLQueryResult')?['value'])",
                                0
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "Capture_Current_Timestamp": [
                        "SUCCEEDED"
                    ]
                },
                "type": "If"
            },
            "Parse-KQLQueryResult": {
                "description": "We will now parse the result from KQL so we have a typed schema",
                "inputs": {
                    "content": "@body('Run_KQL_query')",
                    "schema": {
                        "properties": {
                            "value": {
                                "items": {
                                    "properties": {
                                        "correlationId": {
                                            "type": "string"
                                        },
                                        "eventId": {
                                            "type": "string"
                                        },
                                        "eventName": {
                                            "type": "string"
                                        },
                                        "eventStatus": {
                                            "type": "string"
                                        },
                                        "eventTimestamp": {
                                            "type": "string"
                                        },
                                        "metadata": {
                                            "properties": {
                                                "appName": {
                                                    "type": "string"
                                                },
                                                "batchId": {
                                                    "type": "string"
                                                },
                                                "businessProcessName": {
                                                    "type": "string"
                                                },
                                                "businessProcessVersion": {
                                                    "type": "string"
                                                },
                                                "clientTrackingId": {
                                                    "type": "string"
                                                },
                                                "flowId": {
                                                    "type": "string"
                                                },
                                                "flowName": {
                                                    "type": "string"
                                                },
                                                "flowRunSequenceId": {
                                                    "type": "string"
                                                },
                                                "flowSequenceId": {
                                                    "type": "string"
                                                },
                                                "trackingProfileId": {
                                                    "type": "string"
                                                },
                                                "trackingProfileName": {
                                                    "type": "string"
                                                },
                                                "trackingProfileSequenceId": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "properties": {
                                            "properties": {
                                                "SafetyAssessment": {
                                                    "type": "string"
                                                },
                                                "TicketNumber": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "correlationId",
                                        "eventName",
                                        "eventStatus",
                                        "eventTimestamp",
                                        "eventId",
                                        "properties",
                                        "metadata"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                },
                "runAfter": {
                    "Run_KQL_query": [
                        "SUCCEEDED"
                    ]
                },
                "type": "ParseJson"
            },
            "Query_Entities_Get_latest_alert": {
                "description": "We need to track the last time this workflow ran so that we don't process alerts multiple times.",
                "inputs": {
                    "parameters": {
                        "filter": "PartitionKey eq 'CustomerService' and RowKey eq 'PowerOutageTickets'",
                        "tableName": "@parameters('Azure-TableName')"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "azureTables-2",
                        "operationId": "queryEntities",
                        "serviceProviderId": "/serviceProviders/azureTables"
                    }
                },
                "type": "ServiceProvider"
            },
            "Run_KQL_query": {
                "description": "Run our query looking for failed stages in ADX.",
                "inputs": {
                    "body": {
                        "cluster": "@parameters('Kusto-URL')",
                        "csl": "@{outputs('Compose-KQLQuery')}",
                        "db": "@parameters('Kusto-DBName')"
                    },
                    "host": {
                        "connection": {
                            "referenceName": "kusto-1"
                        }
                    },
                    "method": "post",
                    "path": "/ListKustoResults/false"
                },
                "runAfter": {
                    "Compose-KQLQuery": [
                        "SUCCEEDED"
                    ]
                },
                "type": "ApiConnection"
            }
        },
        "runAfter": {},
        "type": "Scope"
    }
},
"contentVersion": "1.0.0.0",
"outputs": {},
"triggers": {
    "Recurrence": {
        "description": "Currently this workflow is configured to run once per hour. Modify to address your requirements.",
        "recurrence": {
            "frequency": "Hour",
            "interval": 1
        },
        "type": "Recurrence"
    }
}